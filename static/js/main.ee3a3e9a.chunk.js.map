{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/Rating.js","components/MovieCard.js","components/SearchBar.jsx","services/movieData.js","services/movieAPI.js","pages/MovieList.js","pages/NewMovie.js","components/Details.js","pages/MovieDetails.js","pages/EditMovie.js","pages/NotFound.js","pages/DeleteMovie.js","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["Loading","className","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","Rating","MovieCard","src","alt","to","SearchBar","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","selectedGenre","onSelectedGenreChange","name","checked","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","SUCCESS_STATUS","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","MovieList","handleData","filterBookmarked","array","answer","filterGenre","filterSearchText","search","includes","getMoviesArray","a","map","NewMovie","putNewMovie","movieAPI","history","then","push","Details","MovieDetails","undefined","getMovieArray","match","params","console","log","EditMovie","updatedMovie","NotFound","DeleteMovie","Header","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee3a3e9a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <section className=\"loading-container\">\n        <h1 className=\"loading-h1\">Loading...</h1>\n        <div className=\"loading-div\" />\n      </section>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../App.css';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          Title\n          <input\n            placeholder=\"Add the title\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          Subtitle\n          <input\n            placeholder=\"Add the subtitle\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          Image path\n          <input\n            placeholder=\"Insert image path\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          Storyline\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Genre\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Action</option>\n            <option value=\"comedy\">Comedy</option>\n            <option value=\"thriller\">Thriller</option>\n            <option value=\"fantasy\">Fantasy</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div className=\"movie-form\">\n        <label htmlFor=\"movie_rating\">\n          Rating\n          <input\n            placeholder=\"Movie rating\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"movies-form\">\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    rating: PropTypes.number,\n    id: PropTypes.number,\n\n  }).isRequired,\n\n};\nexport default MovieForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { props } = this;\n    const { rating } = props;\n    return (\n      <div className=\"rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = {\n  rating: PropTypes.number.isRequired,\n};\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Rating from './Rating';\nimport '../App.css';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { props } = this;\n    const { title, subtitle, storyline, imagePath, rating, id } = props.movie;\n    return (\n      <div className=\"movie-card movie-card-body\" data-testid=\"movie-card\">\n        <h4 className=\"movie-card-title\" data-testid=\"movie-card-title\">{title}</h4>\n        <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n        <p className=\"movie-card-storyline\">{storyline}</p>\n        <img src={ imagePath } alt=\"\" className=\"movie-card-image\" />\n        <Link to={ `/movies/${id}` } className=\"link-button\"> More info </Link>\n        <Rating rating={ rating } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    rating: PropTypes.string,\n    id: PropTypes.number,\n\n  }).isRequired,\n};\n\nexport default MovieCard;\n","// implement SearchBar component here\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends React.Component {\n  render() {\n    const { searchText,\n      onSearchTextChange,\n      bookmarkedOnly,\n      onBookmarkedChange,\n      selectedGenre,\n      onSelectedGenreChange } = this.props;\n\n    return (\n      <form data-testid=\"search-bar-form\" className=\"search-bar\">\n        <label htmlFor=\"textInput\" data-testid=\"text-input-label\">\n          Search\n          <input\n            type=\"text\"\n            name=\"searchText\"\n            id=\"textInput\"\n            data-testid=\"text-input\"\n            value={ searchText }\n            onChange={ onSearchTextChange }\n          />\n        </label>\n        <label htmlFor=\"bookmarkedOnly\" data-testid=\"checkbox-input-label\">\n          Favorite only\n          <input\n            type=\"checkbox\"\n            data-testid=\"checkbox-input\"\n            name=\"bookmarkedOnly\"\n            id=\"bookmarkedOnly\"\n            checked={ bookmarkedOnly }\n            onChange={ onBookmarkedChange }\n          />\n        </label>\n        <label htmlFor=\"select-input\" data-testid=\"select-input-label\">\n          Genre\n          <select\n            name=\"selectedGenre\"\n            id=\"select-input\"\n            data-testid=\"select-input\"\n            value={ selectedGenre }\n            onChange={ onSelectedGenreChange }\n          >\n            <option value=\"\" data-testid=\"select-option\">All</option>\n            <option value=\"action\" data-testid=\"select-option\">Action</option>\n            <option value=\"comedy\" data-testid=\"select-option\">Comedy</option>\n            <option value=\"thriller\" data-testid=\"select-option\">Thriller</option>\n          </select>\n        </label>\n      </form>\n    );\n  }\n}\n\nexport default SearchBar;\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: '/images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Loading } from '../components';\nimport MovieCard from '../components/MovieCard';\nimport SearchBar from '../components/SearchBar';\n\nimport '../App.css';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: ['no-movies'],\n    };\n    this.getMoviesArray = this.getMoviesArray.bind(this);\n    this.handleData = this.handleData.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMoviesArray();\n  }\n\n  handleData = (event) => {\n    const { name } = event.target;\n    const value = event.target.type === 'checkbox'\n      ? event.target.checked\n      : event.target.value;\n\n    this.setState(({\n      [name]: value,\n    }));\n  }\n\n  async getMoviesArray() {\n    const movies = await movieAPI.getMovies();\n    this.setState({\n      movies,\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n    });\n  }\n\n  filterBookmarked = (array) => {\n    const { state } = this;\n    const bool = state.bookmarkedOnly;\n    let answer = array;\n    if (bool) { answer = array.filter((movie) => movie.bookmarked === true); }\n    return answer;\n  }\n\n  filterGenre = (array) => {\n    const { state } = this;\n    const genre = state.selectedGenre;\n    let answer = array;\n    if (genre !== '') { answer = array.filter((movie) => movie.genre === genre); }\n    return answer;\n  }\n\n  filterSearchText = (array) => {\n    const { state } = this;\n    const search = state.searchText;\n    let answer = array;\n    if (search !== '') {\n      answer = array.filter((movie) => {\n        const fullText = `${movie.title} ${movie.subtitle} ${movie.storyline}`;\n        return fullText.includes(search);\n      });\n    }\n    return answer;\n  }\n\n  render() {\n    let { movies } = this.state;\n    const { searchText, bookmarkedOnly, selectedGenre } = this.state;\n    movies = this.filterBookmarked(movies);\n    movies = this.filterGenre(movies);\n    movies = this.filterSearchText(movies);\n\n    // Render Loading here if the request is still happening\n\n    return (\n      <div className=\"movie-list\" data-testid=\"movie-list\">\n        <SearchBar\n          searchText={ searchText }\n          onSearchTextChange={ this.handleData }\n          bookmarkedOnly={ bookmarkedOnly }\n          onBookmarkedChange={ this.handleData }\n          selectedGenre={ selectedGenre }\n          onSelectedGenreChange={ this.handleData }\n        />\n        {movies[0] === 'no-movies'\n          ? <Loading />\n          : movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    const putNewMovie = movieAPI.createMovie;\n    const { history } = this.props;\n    putNewMovie(newMovie).then(history.push('/'));\n  }\n\n  render() {\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './Details.css';\n\nclass Details extends Component {\n  render() {\n    const { movie } = this.props;\n\n    const { title, storyline, imagePath, genre, rating, subtitle, id } = movie;\n\n    return (\n      <div data-testid=\"movie-details\">\n        <img alt=\"Movie Cover\" src={ `../${imagePath}` } className=\"img-details\" />\n        <p>{`Title: ${title}`}</p>\n        <p>{ `Subtitle: ${subtitle}` }</p>\n        <p>{ `Storyline: ${storyline}` }</p>\n        <p>{ `Genre: ${genre}` }</p>\n        <p>{ `Rating: ${rating}` }</p>\n        <nav className=\"details-buttons-container\">\n          <Link to=\"/\" className=\"details-button\">Back</Link>\n          <Link to={ `/movies/${id}/edit` } className=\"details-button\"> Edit </Link>\n          <Link to={ `/movies/${id}/delete` } className=\"details-button\">Delete</Link>\n        </nav>\n\n      </div>\n    );\n  }\n}\n\nDetails.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    rating: PropTypes.number,\n    id: PropTypes.number,\n    genre: PropTypes.string,\n\n  }).isRequired,\n};\n\nexport default Details;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\nimport Details from '../components/Details';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie: undefined,\n    };\n    this.getMovieArray = this.getMovieArray.bind(this);\n    this.deleteMovie = this.deleteMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMovieArray();\n  }\n\n  async getMovieArray() {\n    const { match } = this.props;\n    const { params } = match;\n    const { id } = params;\n\n    console.log(id);\n    const movie = await movieAPI.getMovie(id);\n    this.setState({\n      movie,\n    });\n  }\n\n  deleteMovie() {\n    const { match, history } = this.props;\n    const { params } = match;\n    const { id } = params;\n    movieAPI.deleteMovie(id).then(history.push('/'));\n  }\n\n  render() {\n    const { movie } = this.state;\n\n    return (\n      <div>\n        {movie === undefined\n          ? <Loading />\n          : <Details movie={ movie } />}\n        {/* <Link to=\"/\" onClick={ this.deleteMovie }>DELETAR</Link> */}\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n  history: PropTypes.shape({\n\n    push: PropTypes.shape({\n    }),\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: undefined,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getMovieArray = this.getMovieArray.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMovieArray();\n  }\n\n  handleSubmit(updatedMovie) {\n    const movie = updatedMovie;\n    this.setState(() => ({\n      movie,\n    }), () => {\n      const { history, match } = this.props;\n      const { params } = match;\n      const { id } = params;\n      movieAPI.updateMovie(movie).then(\n        history.push(`/movies/${id}`),\n      );\n    });\n  }\n\n  async getMovieArray() {\n    const { match } = this.props;\n    const { params } = match;\n    const { id } = params;\n\n    const movie = await movieAPI.getMovie(id);\n    this.setState({\n      movie,\n    });\n  }\n\n  render() {\n    const { movie } = this.state;\n\n    return (\n      <div data-testid=\"edit-movie\">\n\n        {movie\n          ? <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n          : <Loading /> }\n\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { Redirect, Switch } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\n\nclass DeleteMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n\n  componentDidMount() {\n    const { match } = this.props;\n    const { params } = match;\n    const { id } = params;\n    movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    return (\n      <Switch>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  }\n}\n\nDeleteMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default DeleteMovie;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n        <nav className=\"header-buttons-container\">\n          <Link to=\"/\" className=\"header-link\">HOME</Link>\n          <Link to=\"/movies/new\" className=\"header-link\">ADD MOVIE</Link>\n        </nav>\n\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport NewMovie from './pages/NewMovie';\nimport MovieDetails from './pages/MovieDetails';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\nimport DeleteMovie from './pages/DeleteMovie';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route exact path=\"/movies/new\" component={ NewMovie } />\n        <Route\n          exact\n          path=\"/movies/:id\"\n          render={ (props) => <MovieDetails { ...props } /> }\n        />\n        <Route\n          exact\n          path=\"/movies/:id/edit\"\n          render={ (props) => <EditMovie { ...props } /> }\n        />\n        <Route path=\"/movies/:id/delete\" component={ DeleteMovie } />\n        <Route component={ NotFound } />\n\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}